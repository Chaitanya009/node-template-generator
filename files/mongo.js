const index =
    `const app = require('./app')
// connection with db
require('./db/connection')

// importing route.js
require('./route')(app)`

const route =
    `const userCtrl = require('./controller/user')

module.exports = (app) => {

    app.get('/', (req, res) => res.send('service is running'))

    // user apis
    app.post('/user', userCtrl.createUser)
    app.get('/user/:_id', userCtrl.getUser)
}`

const connection =
    `const mongoose = require('mongoose')
require('dotenv').config()
const uri = process.env.DB_URL

mongoose.connect(uri, { useNewUrlParser: true, useUnifiedTopology: true }, (err) => {
    if (err) {
        console.log('Some problem with the connection ' + err)
    }
    else {
        console.log('connected to db')
    }
})

exports.module = mongoose`

const userModel =
    `const mongoose = require('mongoose')

const Schema = mongoose.Schema
const ObjectId = Schema.Types.ObjectId

const schema = new mongoose.Schema({
    first_name: { type: String },
    last_name: { type: String },
    email: { type: String }
}, { timestamps: true })

module.exports = mongoose.model('user', schema)`

const app =
    `const express = require('express')
const app = express()
const bodyParser = require('body-parser')
const port = 3000

app.use(bodyParser.json()); // for parsing application/json
app.use(bodyParser.urlencoded({ extended: true })); // for parsing application/x-www-form-urlencoded

const allowCrossDomain = (req, res, next) => {
    res.header('Access-Control-Allow-Origin', '*');
  ;  res.header('Access-Control-Allow-Methods', 'GET,PUT,POST,DELETE,OPTIONS');
    res.header('Access-Control-Allow-Headers', 'Origin, Content-Type, Authorization, Accept,Content-Length, X-Requested-With, X-PINGOTHER');
    if ('OPTIONS' === req.method) {
        res.sendStatus(200);
    } else {
        next();
    }
};
app.use(allowCrossDomain)

app.listen(port, () => console.log('Example app listening on port 3000'))

module.exports = app`

const userService =
    `const userModel = require('../db/model/user')

const save = (data) => {
    return new Promise((resolve, reject) => {
        let user = new userModel(data)
        user.save((err, result) => {
            err ? reject(err) : resolve(result)
        })
    })
}

const fetch = (query) => {
    return new Promise((resolve, reject) => {
        userModel.find(query, (err, result) => {
            err ? reject(err) : resolve(result)
        })
    })
}

module.exports = {
    save,
    fetch
}`

const userCtrl =
    `const userService = require('../services/user')

const createUser = async (req, res) => {
    try{
        const result = await userService.save(req.body)
        res.send(result)
    } catch(err){
        res.status(500).send({
            message: "Internal server error"
        })
    }
}

const getUser = async (req, res) => {
    try{
        const result = await userService.fetch({ _id: req.params._id })
        res.status(200).send(result)
    } catch(err){
        res.status(500).send({
            message: "Internal server error"
        })
    }
}

module.exports = {
    createUser,
    getUser
}`

const createEnv = (db_url) => {
    return `DB_URL=${db_url}`
}

const createPackageJson = (app_name) => {
    return `{
        "name": "${app_name}",
        "version": "1.0.0",
        "description": "",
        "main": "index.js",
        "scripts": {
            "start": "node index.js",
            "test": "echo 'Error: no test specified' && exit 1"
        },
        "author": "",
        "license": "ISC",
        "dependencies": {
            "express": "^4.17.1",
            "mongoose": "^5.6.9",
            "dotenv": "^8.1.0"
        }
    }`
}

const gitIgnore =
    `# Logs
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*

# Runtime data
pids
*.pid
*.seed
*.pid.lock

# Directory for instrumented libs generated by jscoverage/JSCover
lib-cov

# Coverage directory used by tools like istanbul
coverage

# nyc test coverage
.nyc_output

# Grunt intermediate storage (http://gruntjs.com/creating-plugins#storing-task-files)
.grunt

# Bower dependency directory (https://bower.io/)
bower_components

# node-waf configuration
.lock-wscript

# Compiled binary addons (https://nodejs.org/api/addons.html)
build/Release

# Dependency directories
node_modules/
jspm_packages/

# TypeScript v1 declaration files
typings/

# Optional npm cache directory
.npm

# Optional eslint cache
.eslintcache

# Optional REPL history
.node_repl_history

# Output of 'npm pack'
*.tgz

# Yarn Integrity file
.yarn-integrity

# dotenv environment variables file
.env

# next.js build output
.next
`

module.exports = {
    index,
    route,
    connection,
    userModel,
    userService,
    userCtrl,
    app,
    createEnv,
    createPackageJson,
    gitIgnore
}